{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","img","map","style","position","src","this","width","onLoad","load","onClick","area","clicked","onMouseEnter","enterArea","onMouseLeave","leaveArea","onMouseMove","_","evt","moveOnArea","onImageClick","clickedOutside","onImageMouseMove","moveOnImage","lineWidth","strokeColor","hoveredArea","className","getTipPosition","name","top","center","left","msg","moveMsg","setState","shape","JSON","stringify","coords","x","nativeEvent","layerX","y","layerY","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","areas","preFillColor","fillColor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"41BA6GeA,E,YAvGb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,IAAMF,EAAME,IACZC,IAAMH,EAAMG,KAJI,E,sEAQT,IAAD,OACR,OACM,yBAAKC,MAAO,CAAEC,SAAU,aACtB,kBAAC,IAAD,CACEC,IAAKC,KAAKN,MAAMC,IAChBC,IAAKI,KAAKN,MAAME,IAChBK,MAAO,IACPC,OAAQ,kBAAM,EAAKC,QACnBC,QAAS,SAAAC,GAAI,OAAI,EAAKC,QAAQD,IAC9BE,aAAc,SAAAF,GAAI,OAAI,EAAKG,UAAUH,IACrCI,aAAc,SAAAJ,GAAI,OAAI,EAAKK,UAAUL,IACrCM,YAAa,SAACN,EAAMO,EAAGC,GAAV,OAAkB,EAAKC,WAAWT,EAAMQ,IACrDE,aAAc,SAAAF,GAAG,OAAI,EAAKG,eAAeH,IACzCI,iBAAkB,SAAAJ,GAAG,OAAI,EAAKK,YAAYL,IAC1CM,UAAW,EACXC,YAAa,UAEdpB,KAAKN,MAAM2B,aACV,0BACEC,UAAU,UACVzB,MAAK,KAAOG,KAAKuB,eAAevB,KAAKN,MAAM2B,eAE1CrB,KAAKN,MAAM2B,aAAerB,KAAKN,MAAM2B,YAAYG,S,qCAQjDnB,GACb,MAAO,CAAEoB,IAAI,GAAD,OAAKpB,EAAKqB,OAAO,GAAjB,MAAyBC,KAAK,GAAD,OAAKtB,EAAKqB,OAAO,GAAjB,S,wCAIzC,MAAO,CAAEL,YAAa,KAAMO,IAAK,KAAMC,QAAS,Q,6BAIhD7B,KAAK8B,SAAS,CAAEF,IAAK,4B,8BAGfvB,GACNL,KAAK8B,SAAS,CACZF,IAAI,kBAAD,OAAoBvB,EAAK0B,MAAzB,sBAA4CC,KAAKC,UAClD5B,EAAK6B,QADJ,U,qCAMQrB,GACb,IAAMqB,EAAS,CAAEC,EAAGtB,EAAIuB,YAAYC,OAAQC,EAAGzB,EAAIuB,YAAYG,QAC/DvC,KAAK8B,SAAS,CACZF,IAAI,sCAAD,OAAwCI,KAAKC,UAAUC,GAAvD,U,kCAIKrB,GACV,IAAMqB,EAAS,CAAEC,EAAGtB,EAAIuB,YAAYC,OAAQC,EAAGzB,EAAIuB,YAAYG,QAC/DvC,KAAK8B,SAAS,CACZD,QAAQ,oCAAD,OAAsCG,KAAKC,UAAUC,GAArD,U,gCAID7B,GACRL,KAAK8B,SAAS,CACZT,YAAahB,EACbuB,IAAI,eAAD,OAAiBvB,EAAK0B,MAAtB,YAA+B1B,EAAKmB,KAApC,sBAAsDQ,KAAKC,UAC5D5B,EAAK6B,QADJ,U,gCAMG7B,GACRL,KAAK8B,SAAS,CACZT,YAAa,KACbO,IAAI,cAAD,OAAgBvB,EAAK0B,MAArB,YAA8B1B,EAAKmB,KAAnC,sBAAqDQ,KAAKC,UAC3D5B,EAAK6B,QADJ,U,iCAMI7B,EAAMQ,GACf,IAAMqB,EAAS,CAAEC,EAAGtB,EAAIuB,YAAYC,OAAQC,EAAGzB,EAAIuB,YAAYG,QAC/DvC,KAAK8B,SAAS,CACZD,QAAQ,gBAAD,OAAkBxB,EAAK0B,MAAvB,YACL1B,EAAKmB,KADA,sBAEOQ,KAAKC,UAAUC,GAFtB,Y,GA9FKM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCyCNC,IAASC,OAAO,kBAAC,EAAD,CAAKrD,IAHX,iEAGqBC,IArDrB,CACR4B,KAAM,SACNyB,MAAO,CACL,CACEzB,KAAM,IACNO,MAAO,OACPG,OAAQ,CAAC,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IACzCgB,aAAc,QACdC,UAAW,WAEb,CACE3B,KAAM,IACNO,MAAO,OACPG,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5CgB,aAAc,OACd/B,UAAW,GACXC,YAAa,WAEf,CACEI,KAAM,IACNO,MAAO,OACPG,OAAQ,CAAC,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,KAC1CgB,aAAc,SACd/B,UAAW,GACXC,YAAa,WAEf,CACEI,KAAM,IACNO,MAAO,OACPG,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5CgB,aAAc,OAEhB,CACE1B,KAAM,IACNO,MAAO,SACPG,OAAQ,CAAC,IAAK,IAAK,IACnBgB,aAAc,uBACd/B,UAAW,GAEb,CACEK,KAAM,IACNO,MAAO,OACPG,OAAQ,CAAC,IAAK,IAAK,IAAK,IACxBf,UAAW,EACX+B,aAAc,2BACd9B,YAAa,eAQyBgC,SAASC,eAAe,SDsE9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4918ff3e.chunk.js","sourcesContent":["import React from 'react';\nimport ImageMapper from 'react-image-mapper';\n// import './App.css';\n\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      img : props.img,\n      map : props.map\n    }\n  }\n\n  render () {\n    return(\n          <div style={{ position: \"relative\" }}>\n            <ImageMapper\n              src={this.state.img}\n              map={this.state.map}\n              width={500}\n              onLoad={() => this.load()}\n              onClick={area => this.clicked(area)}\n              onMouseEnter={area => this.enterArea(area)}\n              onMouseLeave={area => this.leaveArea(area)}\n              onMouseMove={(area, _, evt) => this.moveOnArea(area, evt)}\n              onImageClick={evt => this.clickedOutside(evt)}\n              onImageMouseMove={evt => this.moveOnImage(evt)}\n              lineWidth={4}\n              strokeColor={\"white\"}\n            />\n            {this.state.hoveredArea && (\n              <span\n                className=\"tooltip\"\n                style={{ ...this.getTipPosition(this.state.hoveredArea) }}\n              >\n                {this.state.hoveredArea && this.state.hoveredArea.name}\n              </span>\n            )}\n          </div>\n    );\n\n  }\n\n  getTipPosition(area) {\n    return { top: `${area.center[1]}px`, left: `${area.center[0]}px` };\n  }\n\n  getInitialState() {\n    return { hoveredArea: null, msg: null, moveMsg: null };\n  }\n\n  load() {\n    this.setState({ msg: \"Interact with image !\" });\n  }\n\n  clicked(area) {\n    this.setState({\n      msg: `You clicked on ${area.shape} at coords ${JSON.stringify(\n        area.coords\n      )} !`\n    });\n  }\n\n  clickedOutside(evt) {\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n    this.setState({\n      msg: `You clicked on the image at coords ${JSON.stringify(coords)} !`\n    });\n  }\n\n  moveOnImage(evt) {\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n    this.setState({\n      moveMsg: `You moved on the image at coords ${JSON.stringify(coords)} !`\n    });\n  }\n\n  enterArea(area) {\n    this.setState({\n      hoveredArea: area,\n      msg: `You entered ${area.shape} ${area.name} at coords ${JSON.stringify(\n        area.coords\n      )} !`\n    });\n  }\n\n  leaveArea(area) {\n    this.setState({\n      hoveredArea: null,\n      msg: `You leaved ${area.shape} ${area.name} at coords ${JSON.stringify(\n        area.coords\n      )} !`\n    });\n  }\n\n  moveOnArea(area, evt) {\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n    this.setState({\n      moveMsg: `You moved on ${area.shape} ${\n        area.name\n      } at coords ${JSON.stringify(coords)} !`\n    });\n  }\n  \n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar MAP = {\n  name: \"my-map\",\n  areas: [\n    {\n      name: \"1\",\n      shape: \"poly\",\n      coords: [25, 33, 27, 300, 128, 240, 128, 94],\n      preFillColor: \"green\",\n      fillColor: \"#0000ff\"\n    },\n    {\n      name: \"2\",\n      shape: \"poly\",\n      coords: [219, 118, 220, 210, 283, 210, 284, 119],\n      preFillColor: \"pink\",\n      lineWidth: 10,\n      strokeColor: \"#0000ff\"\n    },\n    {\n      name: \"3\",\n      shape: \"poly\",\n      coords: [381, 241, 383, 94, 462, 53, 457, 282],\n      preFillColor: \"yellow\", // this is mandatory for stroke color to work\n      lineWidth: 10,\n      strokeColor: \"#6afd09\"\n    },\n    {\n      name: \"4\",\n      shape: \"poly\",\n      coords: [245, 285, 290, 285, 274, 239, 249, 238],\n      preFillColor: \"red\"\n    },\n    {\n      name: \"5\",\n      shape: \"circle\",\n      coords: [170, 100, 25],\n      preFillColor: \"rgb(255,255,255,0.3)\",\n      lineWidth: 2\n    },\n    {\n      name: \"6\",\n      shape: \"rect\",\n      coords: [270, 100, 200, 50],\n      lineWidth: 2,\n      preFillColor: \"rgba(255, 255, 255, 0.3)\",\n      strokeColor: \"#6afd09\"\n    }\n  ]\n};\n\nvar URL = \"https://c1.staticflickr.com/5/4052/4503898393_303cfbc9fd_b.jpg\";\n\n\nReactDOM.render(<App img={URL} map={MAP}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}